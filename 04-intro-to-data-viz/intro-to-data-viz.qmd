---
title: "Introduction to Data Visualization with R"
format: revealjs
---

```{r}
#| echo: false
library(ggplot2)
```

## ggplot

[ggplot](https://ggplot2.tidyverse.org) is the most common approach for creating data visualizations with R.

Source: Large parts of this section are adapted from the [first chapter of _R for Data Science_](https://r4ds.hadley.nz/data-visualize).

## ggplot Syntax

Making a data visualization with ggplot starts with

```{r}
#| eval: false
ggplot(data, aes())
```

where `data` is a dataframe and `aes()` describes how columns in the dataframe will be used in the visualization.

## ggplot Aesthetics

For example

```{r}
ggplot(penguins, aes(x = flipper_len, y = body_mass))
```

will use the x-axis for `flipper_len` and the y-axis for `body_mass`.

## Aesthetics Options

Common aesthetics include:

::: {.columns}

::: {.column width="50%"}
- `x`
- `y`
- `color`
:::

::: {.column width="50%"}
- `fill`
- `shape`
- `size`
:::

:::

You can read more about aesthetics in the ggplot documentation [here](https://ggplot2.tidyverse.org/reference/index.html#aesthetics).

## Geometries

The next step in making a plot with ggplot is choosing how to visualize the data. We'll start with a scatter plot.

With ggplot, these choices always start with "`geom_`".

## Geometries

```{r}
ggplot(penguins, aes(x = body_mass, y = flipper_len)) +
  geom_point()
```

## Geometries

```{r}
ggplot(penguins, aes(x = body_mass, y = flipper_len, color = species)) +
  geom_point()
```

## Geometries

```{r}
ggplot(penguins, aes(x = body_mass, y = flipper_len, color = island)) +
  geom_point()
```

## Geometry Options

Some of the most common geometries are

::: {.columns}

::: {.column width="50%"}
- `geom_point()`
- `geom_line()`
- `geom_bar()`
- `geom_col()`
:::

::: {.column width="50%"}
- `geom_histogram()`
- `geom_density()`
- `geom_label()`
- `geom_smooth()`
:::

:::

You can read about all the geometries [here](https://ggplot2.tidyverse.org/reference/index.html#geoms).

## `geom_bar()` Example

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar()
```

## Second `geom_bar()` Example

```{r}
ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar()
```

## `geom_density()` Example

```{r}
ggplot(penguins, aes(x = body_mass, fill = species)) +
  geom_density(alpha = 0.5)
```

## `geom_smooth()` Example

```{r}
ggplot(penguins, aes(x = body_mass, y = flipper_len, color = species)) +
  geom_point() +
  geom_smooth(method = "lm") # linear regression
```

## Labels

You can label your plot with `labs()` like

```{r}
#| eval: false
labs(
    title = "The plot title",
    x = "The x-axis label",
    y = "The y=axis label",
    caption = "The plot caption"
)
```

## Example of Labels

```{r}
#| eval: false
ggplot(penguins, aes(x = body_mass, y = flipper_len, color = species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    title = "Relationship Between Body Mass and Flipper Length of Penguins",
    x = "Body Mass (grams)",
    y = "Flipper Length (mm)",
    caption = "Body mass and flipper length are positively correlated for all three species of penguin"
  )
```

## Example of Labels

```{r}
#| echo: false
ggplot(penguins, aes(x = body_mass, y = flipper_len, color = species)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    title = "Relationship Between Body Mass and Flipper Length of Penguins",
    x = "Body Mass (grams)",
    y = "Flipper Length (mm)",
    caption = "Body mass and flipper length are positively correlated for all three species of penguin"
  )
```

## Experiment

Let's take a little bit and practice making various plots. You can use the penguins dataset or try

- `iris`: Data on the length and width of the sepal and flower of three species of Iris plants.
- `Titanic`: Survival status of passengers on the Titantic by class, sex, and age.
- `trees`: The girth, height, and volume of 31 trees.

You can read about all the datasets built into R with `?datasets`.