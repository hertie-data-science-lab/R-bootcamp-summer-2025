---
title: "Vectors and Matrices"
format: revealjs
---

## Review of Vectors

We covered the basics of vectors in the [Introduction to R slides](../03-R-intro/intro-to-R.html). To recap, vectors are an ordered collection of information. For example

```{r}
example_vector <- c(1:10)
example_vector
```

As a reminder, `c()` is a function that creates a vector. As you can see above, `c(1:10)` is a vector containing every integer between 1 and 10.

## Vector Operations

To recap, vector operations are element-wise. For example

```{r}
c(1:10) * c(1:10)
```

multiplies the 1st element of each vector together (1 times 1), the 2nd element of each (2 times 2), and so on.

## Vectors of Different Lengths

If you do vector operations with vectors of different lengths, the elements of the shorter vector are recycled. For example

```{r}
c(1:10) * c(1,2)
```

1 is multipled by 1, 2 is multiplied by 2, 3 is multiplied by 1, 4 is multiplied by 2, and so on.

Watch out for this--vector recycling is often unintended and a source of bugs.

## Vector Types/Classes

Each element of a vector has to be the same kind of thing. R usually "coerces" (i.e. changes) different elements to the same kind inside vectors if you include various kinds inside `c()`. For example

```{r}
c(1, 2, 3, "Hello")
```

As a rule of thumb, R will coerce elements to strings because almost anything can be represented as a string.

## Logical Vectors

Vector operations with logical operators such as `&`, `|`, `>`, and `<` return `TRUE` or `FALSE`. For example

```{r}
c(1:10) > 5
```

Logical vector operations are used extensively when subsetting dataframes and other kinds of data with base R.

## Exercise

The modulo arithmetic operator `%%` returns the remainder after division. For example

```{r}
c(2:5)
c(2:5) %% 2
```

How can we use this to identify even numbers between 1 and 10?

Hints: We can subset a vector using anothe vector with `[]`. Recall that `==` checks that an element is equal to another element.

## Solution

```{r}
c(1:10) %% 2
c(1:10) %% 2 == 0
c(1:10)[c(1:10) %% 2 == 0]
```

## Named Vectors

Elements inside a vector can have names. For example

```{r}
berlin_pop <- c(
    "1980" = 3048759, 
    "1990" = 3433695, 
    "2000" = 3382169, 
    "2010" = 3460725, 
    "2020" = 3664088
)
berlin_pop
```

## Exercise

How can we get the population of Berlin in years where the population exceeds 3.4 million?

## Solution

```{r}
berlin_pop[berlin_pop > 3400000]
```

## Indexing Named Vectors

You can accesss the elements of a named vector by their names. For example, we can get Berlin's population in the year 2000 with

```{r}
berlin_pop["2000"]
```

You can select multiple elements by name by putting the names in their own vector

```{r}
berlin_pop[c("2000", "2010", "2020")]
```

## Matrices

A matrix is a two-dimensional set of values. You can think of it as a vector of vectors. A matrix is similar to a dataframe in that it has rows and columns.

## Indexing Matrices

Rather than accesing elements with one one index (`[index]`, where `index` is either a number or name), elements are accessed with a row and column index  (`[row_index, column_index]`) as implied by the column and row labels below

```{r}
#| echo: false
example_matrix <- matrix(1:25, nrow = 5, ncol = 5)
```

```{r}
example_matrix
```

## Indexing Matrices

We can get the first row of `example_matrix` with

```{r}
example_matrix[1,]
```

The first column with

```{r}
example_matrix[,1]
```

Note that indexing a single row or column of a matrix returns a vector.

## Indexing Matrices

We can get an individual element from a matrix by including both a row and column index.

```{r}
example_matrix[1,1]
```

## Exercise

Get the elements 5, 13, 17, and 23 out of `example_matrix`.

## Solution

```{r}
example_matrix[5,1]
example_matrix[3,3]
example_matrix[2,4]
example_matrix[3,5]
```

## Subsetting Matrices

We can subset a matrix by including multiple values in the indices.

```{r}
example_matrix[1:3,1:3]
```

As long as the subset includes more than one row or column, R will return a matrix rather than a vector.

# Subsetting Matrices

If you do include an index for the rows/columns, R will return all of the rows/columns

```{r}
example_matrix[1:2,]
```

```{r}
example_matrix[,1:2]
```

## Exercise

Get the 9 values in the center of the matrix (7-9, 12-14, and 17-19).

## Solution

```{r}
example_matrix[2:4,2:4]
```

## Matrix Operations

Matrix operations are very similar to vector operations. Matrix operations with a scalar (a single element) perform the operation on each element of the matrix.

```{r}
example_matrix * 5
```

## Matrix Operations

Matrices support the same logical operations as vectors. For example, we can convert `example_matrix` into a matrix of `TRUE` values when the element is even and `FALSE` values when the element is odd with

```{r}
example_matrix %% 2 == 0
```

## Subsetting with Logical Matrices

Matrices can be subset by logical matrices just like vectors can be subset with logical vectors. This will return a vector of all of the elements with a row and column index that corresponds to true in the logical matrix. For example, we can use the logical matrix from the previous slide to get a vector of all the even numbers in `example_matrix`.

```{r}
example_matrix[example_matrix %% 2 == 0]
```

## Exercise

Get all the elements in `example_matrix` that are divisible by 3. Then subset those elements to those with at least 2 digits.

## Solution

```{r}
divisible_by_3 <- example_matrix[example_matrix %% 3 == 0]
divisible_by_3[divisible_by_3 >= 10]
```

## Matrices and Functions

Many functions (e.g. `sum()`, `min()`, `max()`, and `mean()`) work with matrices. These functions will treat the matrix like a vector and operate on all of the elements in the matrix.

```{r}
sum(example_matrix)
min(example_matrix)
max(example_matrix)
mean(example_matrix)
```

## Exercise

How much many times larger is the largest odd number in `example_matrix` compared to the smallest even number?

## Solution

```{r}
largest_odd <- max(example_matrix[example_matrix %% 2 == 1])
smallest_even <- min(example_matrix[example_matrix %% 2 == 0])
largest_odd / smallest_even
```