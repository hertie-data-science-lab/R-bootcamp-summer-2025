---
title: "Introduction to R and RStudio"
format: revealjs
---

# Using R as a Calculator

## The Console in RStudio

![The red box is the console where you can freely run R code. I included a few examples of using R + RStudio as a calculator. `==` means equal to.](images/r-as-calculator-01.png)

## R Operators

R includes many operators, including

::: {.columns}

::: {.column width="40%"}
### Arithmetic
- `+` : Addition
- `-` : Subtraction
- `*` : Multiplication
- `/` : Division
- `^` : Exponentiation
:::

::: {.column width="40%"}
### Relational
- `==` : Equal to
- `!=` : Not equal to
- `<` : Less than
- `>` : Greater than
- `<=` : Less than or equal to
- `>=` : Greater than or equal to
:::

::: {.column width="20%"}
### Logical
- `&`: AND
- `|`: OR
- `!`: NOT
::: 

:::

## Exercises

1. Calculate the number of hours in a year.
2. Calculate the population density of Berlin (Let's say 3897145 persons in 891.3 $km^2$)

## Solution

```{r}
365 * 24
```

```{r}
3897145 / 891.3
```

# Objects

## What is an object in R?

An object in R is a named container that stores data, results, or functions.

![You can think of an object as a box with a name.](images/r-objects-contents-name-illustration.png)

Image Source: Data Analysis for Social Science by Elena Llaudet and Kosuke Imai

## How to create an object

Objects are assigned to names using the assignment operator `<-`. For example

```{r}
name <- "Jackson M Luckey"
year <- 2025
two_plus_two <- 2 + 2
two_times_two <- 2 * 2
```

We can then use these objects:

```{r}
two_plus_two == two_times_two
```

## The Environment Pane in RStudio

![The red box is the environment pane, which shows all the objects in your current R session](images/r-objects-01.png).

## Exercise

Using objects, calculate the population density of Berlin (3897145 persons in 891.3 $km^2$) along the lines of

```{r}
days_in_year <- 365
hours_in_day <- 24
hours_in_year <- days_in_year * hours_in_day

hours_in_year
```

## Solution

```{r}
berlin_pop <- 3897145
berlin_area <- 891.3
berlin_pop_density <- berlin_pop / berlin_area

berlin_pop_density
```

## What kinds of objects are there?

Objects can represent different things, like text ("character"), numbers ("numeric"), and functions ("function"). Throughout the bootcamp and the upcoming semester you'll learn about many other kinds of objects.

```{r}
class("Hello")
class(berlin_pop_density)
class(sqrt)
```

## Vectors

Vectors are objects that represent an ordered collection of information. You can create a vector using `c()` as shown below

```{r}
years <- c(2020, 2021, 2022, 2023, 2024, 2025)
cities <- c("Berlin", "Paris", "London", "Beijing", "Tokyo")
```

## Vectors

You can also combine vectors using `c()` like

```{r}
north_american_cities <- c("Mexico City", "New York City", "San Francisco", "Vancouver")
south_american_cities <- c("Rio de Janeiro", "Lima", "Buenos Aires", "Medellin")
american_cities <- c(north_american_cities, south_american_cities)
american_cities
```

Vectors are always one dimensional.

## Vectors

You can manipulate vectors just like individual numbers. For example, we can get the number of seconds since 1970 (a common way of storing dates/time in computers) with

```{r}
seconds_in_hour <- 60 * 60
(years - 1970) * hours_in_year * seconds_in_hour
```

## Exercise

Calculate the population density of Berlin for every year represented in `berlin_pop`.

```{r}
# Population of Berlin in 1980, 1990, 2000, 2010, 2020
years      <- c(1980,    1990,    2000,    2010,    2020)
berlin_pop <- c(3048759, 3433695, 3382169, 3460725, 3664088)
```

## Solution

```{r}
berlin_pop / berlin_area
```

## Indexing Vectors

You can access elements inside a vector using `[]`. For example, to get the first element in `cities` ("Berlin"), do

```{r}
cities[1]
```

In R, counting and indexing start from 1, unlike many other programming languages like Python.

## Exercise

Get the population of Berlin in 2020 from `berlin_pop`.

## Solution

```{r}
berlin_pop[5]
```

## Functions

Functions are another kind of object in R. Many functions take objects as arguments and return an object. For example, `c()` is a function.

Other simple and common functions that work on vectors include:

- `length()`: Returns the number of elements inside an object.
- `min()`: Returns the smallest value in an object.
- `max()`: Returns the largest value in an object.
- `sum()`: Returns the sum of all elements in an object.
- `mean()`: Returns the average (mean) of all elements in an object.

## Functions

For example, we can find the average population of Berlin between 1980 and 2020 by either doing

```{r}
mean(berlin_pop)
```

or

```{r}
sum(berlin_pop) / length(berlin_pop)
```

## Exercise

Using `min()` and `max()`, find the lowest and highest population density in Berlin between 1980 and 2020.

## Solution

```{r}
min(berlin_pop) / berlin_area
```

```{r}
max(berlin_pop) / berlin_area
```

## Dataframes

Dataframes are objects that have columns (conventionally variables) and rows (conventionally observations). Think of a spreadsheet like Excel or Google Sheets.

R has several dataframes, including `penguins`, built in. We can load penguins into R with

```{r}
penguins <- penguins
```

and view the dataframe with

```{r}
#| eval: false
view(Penguins)
```

## Loading Penguins

![`penguins <- penguins` loads the penguin dataset into R, so it appears in the environment pane.](images/r-loading-penguins.png)

## Viewing Penguins

![`View(penguins)` opens a new pane that shows the penguins dataset.](images/r-viewing-penguins.png)

## Dataframe Columns as Vectors

Dataframe columns can be accessed as vectors using `[[]]` (you'll learn when and why to use `[]` versus `[[]]` later) or `$`.

For example, we can get the penguin species column with

```{r}
penguins[["species"]]
```

or

```{r}
penguins$species
```

and the unique penguin species with

```{r}
unique(penguins[["species"]])
```

or

```{r}
unique(penguins$species)
```

## Exercises

1. How many islands are represented in the dataset?
2. What are the earliest and latest years represented in the dataset?

## Solutions

```{r}
unique(penguins[["island"]])
```

```{r}
unique(penguins$island)
```

```{r}
min(penguins[["year"]])
max(penguins[["year"]])
```

```{r}
min(penguins$year)
max(penguins$year)
```

## Creating New Columns with Vector Operations

You can also create new columns using `[[]]` or `$`

```{r}
penguins[["body_mass_kg"]] <- penguins[["body_mass"]] / 1000
```

or

```{r}
penguins$body_mass_kg <- penguins$body_mass / 1000
```